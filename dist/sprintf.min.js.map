{"version":3,"sources":["sprintf.js"],"names":["classOf","o","Object","prototype","toString","call","replace","sprintf","key","sprintf_format","sprintf_parse","arguments","vsprintf","fmt","argv","apply","concat","parse_tree","arg","i","k","ph","pad","pad_character","pad_length","is_positive","sign","cursor","tree_length","length","output","keys","hasOwnProperty","Error","param_no","re","not_type","test","type","not_primitive","Function","numeric_arg","isNaN","TypeError","number","parseInt","String","fromCharCode","JSON","stringify","width","precision","parseFloat","toExponential","toFixed","Number","toPrecision","substring","slice","toLowerCase","valueOf","toUpperCase","json","pad_char","charAt","repeat","align","sprintf_cache","match","_fmt","arg_names","text","exec","push","modulo","placeholder","SyntaxError","field_list","replacement_field","field_match","key_access","index_access","not_string","not_bool","not_json","create","exports","window","define"],"mappings":"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","file":"sprintf.min.js","sourcesContent":["/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxXC])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[\\+\\-]/\n    }\n\n    function classOf(o) {\n        return Object.prototype.toString.call(o).replace(/\\[object (.*?)\\]/, '$1')\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (!arg.hasOwnProperty(ph.keys[k])) {\n                            throw new Error(sprintf('[sprintf] property \"%s\" does not exist', ph.keys[k]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function && ph.type !== 'C') {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'C':\n                        arg = classOf(arg)\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}()\n"]}